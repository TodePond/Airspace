/*************************************************************************************************\
 * Airspace - The perfect JavaScript library by the DreamBerd foundation
 * https://github.com/TodePond/DreamBerd
 *
 *                                                                                                     
 *                                        ...........                                                
 *                                 .:^!77????????????777!~^:.                                        
 *                             .^!7??????????????????????????!^.                                     
 *                           :!?JJJJ????????????????????????????7^.                                  
 *                         :!????!^~???????????????????!^^!????????~.                                
 *                        ~?????7   ~?????????????????7   .??????????~.                              
 *                    ..^7J??????7!!???????????????????7~~7????????????^                             
 *                 :~!7?????????????????????????????????????????????????!.                           
 *                :^^^^^^^^:!?????????????????????????????????????????????:                          
 *                .~!7?????????????????????????????????????????????????????~^^^:                     
 *                .!7????????????????????????????????????????????????????????7!~                     
 *                  .7???????????????????????????????????????????????????????^                       
 *                  :?????????????????????????????????????????????????????????:                      
 *                  :??????????????????????????????????????????????????????????.                     
 *                  ^?????????????????????????????????????????????????????????J!                     
 *                  .???????????????????????????????????????????????????????????.                    
 *                   ~J?????????????????????????????????????????????????????????^                    
 *                    !J???????????????????????????????????????????????????????J~                    
 *                     ~????????????????????????????????????????????????????????.                    
 *                      .!???????????????????????????????????????????????????J?^                     
 *                        .^!???????????????????????????????????????????????7~.                      
 *                           .:~!7?????JJ??????JJJ????????????????????77!~^.                         
 *                                .:~7??J7!!!77???!!!~^^^^^^^::::::...                               
 *                                  .~!!J!::.^!!??^::                                                
 *                                  ^~7?JJ?J~^!7JJJJ7          .....  ..  ................           
 *       :!JY5PGGGGGGGGGGGGGGGGGGGP?7JYYJJJJ7?YYJJJJJPGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGPY~       
 *     ^5########################GJ??YJJJJ??7JYJJJJJ?G########################################J      
 *    !#####################B555YYJYJJYYYYYYJJJJ?????G#########################################^     
 *    P#####################Y7?????JJ???????JJJJYYJY5B########################################G.     
 *    !#####################BGPP55YY555P55YY55PG#############################################G^      
 *     ~G######################################################BJYGB########################J.       
 *      .7G###############G##################################BY^   :^!!75#################5~         
 *         ^?5GBB###BBG5?~.~5B##############B5!7YPBB####BGPJ!.           ^?PB#########BP?^           
 *             .:^^^::       :!YPBB####BBPY7:     .:^^^^:.                  .^~77?77~^.           
 * 
 * 
 * 
 * Developer Note: This code _actually_ works. Airspace is real.
 * 
\*************************************************************************************************/

// --- Reused utility functions ---

/**
 * Converts the supplied value to a number. If the value is a string, pulls it as a variable from the global Airspace instance.
 * @param {string | number} n The value to parse.
 */
function ASToNumber(n) {
    let r = Number(n);
    if (isNaN(r)) {
        const val = window.Airspace[n.trim()];
        r = Number(val.get(val));
    }
    return r;
}

/**
 * A utility reducer for Airspace math functions.
 * @param {any[]} args The arguments to reduce.
 * @param {(accumulator: number, current: any) => number} reducer The reducer function.
 */
function __ASMathReducer(args, reducer) {
    return args
        .map(x => x.get ? x.get(x) : x)
        .join('')
        .split(',')
        .reduce(reducer, 0)
}

// --- Proxies ---

/**
 * @typedef AirspaceProperty
 * @type {ProxyHandler}
 **/

/**
 * This proxies a property on the Airspace object. Adds support for the executor operator on function properties.
 * @type {AirspaceProperty}
 * @see {@link https://github.com/TodePond/Airspace#execute-operator|Executor Operator}
 */
const __airspace_property = {
    get(target, prop, receiver) {
        return target[prop];
    },
    set(target, prop, value, receiver) {
        if (prop === "x") { // Execute operator - https://github.com/TodePond/Airspace#execute-operator
            target(value);
        } else {
            target[prop] = value;
        }
    },
};

/**
 * @typedef AirspaceProxyHandler
 * @type {ProxyHandler}
 **/

/**
 * This proxies the Airspace object itself, providing it with its core functionality.
 * @type {AirspaceProxyHandler}
 * @see {@link https://github.com/TodePond/Airspace}
 */
const __class_a_airspace = {
    get(target, prop, receiver) {
        return target[prop];
    },
    set(target, prop, value, receiver) {
        if (typeof value === "function") {
            if (prop === "x") { // Handle asynchronous rocket operator as required by https://github.com/TodePond/Airspace#functions
                window.requestAnimationFrame(value);
                return;
            }

            const origVal = value;
            value = function () {
                const args = {};
                // Converts the supplied arguments to an object in the form { a:..., b: ... }, as required by https://github.com/TodePond/Airspace#functions
                // If more than 26 arguments are supplied, then it'll also add keys '{', '|', '}', '~' and then the delete control code. No idea what that'll do.
                [...arguments].forEach((arg, i) => {
                    args[String.fromCharCode(i + 97)] = arg;
                });
                return origVal(args);
            };
        } else if (typeof value !== "object") {
            value = {
                value,
                get(o) { return o.value },
                set(x) { this.value = x },
                toString() { return this.get(this).toString() },
            }
            value = new Proxy(value, __airspace_property);
        }
        target[prop] = value;
    },
    has(target, key) {
        if (!target[key]) {
            target[key] = null;
        }
        return true; // Airspace always has control
    }
};

// --- The Airspace core ---

/**
 * @typedef Airspace
 * @type {object}
 * @property {(...args) => void} print Prints out all supplied parameters.
 * @property {(...args) => number} add Adds all supplied parameters together and returns the result.
 * @property {(...args) => number} subtract Subtracts all supplied parameters together and returns the result.
 * @property {(...args) => number} multiply Multiplies all supplied parameters together and returns the result.
 * @property {(...args) => number} divide Divides all supplied parameters together and returns the result.
 * @property {(...args) => number} modulo Modulo-s all supplied parameters together and returns the result.
 **/

/**
 * This is the core object for Airspace, containing built in functions.
 * @type {Airspace}
 */
const __secret_airspace = {
    print: new Proxy(function () {
        const quoteStripper = /^"?(.*?)"?$/;
        let argsArr = [...arguments]
            .map(x => x.raw ? quoteStripper.exec(x.join(''))[1] : x); // Resolves template literals and strips the quotes from them.
                                                                      // This should probably be done generically for all functions
        console.log(...argsArr)
    }, __airspace_property),

    add: new Proxy(function () {
        return __ASMathReducer([...arguments], (a, c) => a + ASToNumber(c))
    }, __airspace_property),

    subtract: new Proxy(function () {
        return __ASMathReducer([...arguments], (a, c) => a - ASToNumber(c))
    }, __airspace_property),

    multiply: new Proxy(function () {
        return __ASMathReducer([...arguments], (a, c) => a * ASToNumber(c))
    }, __airspace_property),

    divide: new Proxy(function () {
        return __ASMathReducer([...arguments], (a, c) => a / ASToNumber(c))
    }, __airspace_property),

    modulo: new Proxy(function () {
        return __ASMathReducer([...arguments], (a, c) => a % ASToNumber(c))
    }, __airspace_property),
};


// --- Add the debug and execute operator to core prototypes ---

[String.prototype, Number.prototype, Function.prototype, Object.prototype, Array.prototype].forEach((proto) => {
    Object.defineProperty(proto, "d", {
        get() {
            console.log(this.toString());
            return this;
        }
    });

    proto.x = function () { return arguments[0](this); }
});

// --- And bring the perfection to the world ---

window.Airspace = new Proxy(__secret_airspace, __class_a_airspace);
